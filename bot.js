const TelegramBot = require('node-telegram-bot-api');
const generateSequence = require('./generator'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
const messages = require('./messages'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
const { createMenu } = require('./menu');

const token = '7868921778:AAF1-y9rzXlAZ_8IvHiutsYo_Yy8OBWTeDg'; // –í–∞—à —Ç–æ–∫–µ–Ω
const bot = new TelegramBot(token, { polling: true });

let missingNumber; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
let numberSequence; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
let gridSize; // –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏, —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º
let currentHints = []; // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
let language = 'en'; // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é



bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  bot.sendMessage(chatId, "<b>Welcome! Please choose your language:</b>", {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', callback_data: 'uk' }],
        [{ text: 'üá¨üáß English', callback_data: 'en' }]
      ]
    },
    parse_mode: 'HTML' // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML
  });
});

// –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
const chatLanguages = {};

bot.on('callback_query', (query) => {

  const chatId = query.message.chat.id;
  const language = query.data;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
  chatLanguages[chatId] = language;

  // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
  const languageMessage = language === 'en' 
    ? "<b>You have selected English.</b>" 
    : "<b>–í–∏ –æ–±—Ä–∞–ª–∏ –£–∫—Ä–∞—ó–Ω—Å—å–∫—É.</b>";

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
  bot.sendMessage(chatId, languageMessage, { parse_mode: 'HTML' });

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
  
  const menu = createMenu(language);
  bot.sendMessage(chatId, "<b>Please choose an option:</b>", {
    reply_markup: menu,
    parse_mode: 'HTML' // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML
  });
});

const sendSquare = (chatId, square) => {
  const formattedSquare = square.map(row => 
      row.map(cell => cell === '?' ? '<b>‚ùì</b>' : `<b>${cell}</b>`).join('   ')
  ).join('<br>');

  bot.sendMessage(chatId, formattedSquare, { parse_mode: 'HTML' });
};


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
function sendLanguageMenu(chatId) {
    const options = {
        reply_markup: {
            keyboard: [
                [{ text: 'English' }, { text: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞' }],
                [{ text: 'Play' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
    bot.sendMessage(chatId, messages[language].chooseLanguage, options);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
bot.on('message', (msg) => {
    const userText = msg.text;

    if (userText === 'English') {
        language = 'en';
        bot.sendMessage(msg.chat.id, messages[language].welcome);
        return sendLanguageMenu(msg.chat.id);
    } else if (userText === '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞') {
        language = 'uk';
        bot.sendMessage(msg.chat.id, messages[language].welcome);
        return sendLanguageMenu(msg.chat.id);
    } else if (userText === 'Play' || userText === '/play') {
        startGame(msg.chat.id);
        return;
    }

    const userGuess = parseInt(userText, 10);
    if (!isNaN(userGuess)) {
        checkGuess(msg.chat.id, userGuess);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
function startGame(chatId) {
    gridSize = getRandomGridSize(); // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏
    const sequence = generateSequence(gridSize);
    numberSequence = sequence.numberSequence;
    missingNumber = sequence.missingNumber;
    currentHints = generateHints(missingNumber); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫

    const sequenceMessage = `Guess the missing number in the following ${sequence.type} sequence:\n` + 
                            numberSequence.map(row => row.join(' ')).join('\n') +
                            `\nType /hint to see a hint or /solution to see the solution.`;
    sendSquare(chatId, square);

    bot.sendMessage(chatId, sequenceMessage);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏
function getRandomGridSize() {
    return Math.floor(Math.random() * 3) + 2; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 2, 3 –∏–ª–∏ 4
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
function checkGuess(chatId, userGuess) {
    if (userGuess === missingNumber) {
        bot.sendMessage(chatId, messages[language].congratulations.replace('{number}', missingNumber));
    } else {
        bot.sendMessage(chatId, messages[language].tryAgain);
    }
}

// –ö–æ–º–∞–Ω–¥–∞ /hint
bot.onText(/\/hint/, (msg) => {
    if (currentHints.length > 0) {
        const hint = currentHints.pop(); // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        bot.sendMessage(msg.chat.id, messages[language].hint.replace('{hint}', hint));
    } else {
        bot.sendMessage(msg.chat.id, messages[language].noMoreHints);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /solution
bot.onText(/\/solution/, (msg) => {
    bot.sendMessage(msg.chat.id, messages[language].solution.replace('{number}', missingNumber));
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
function generateHints(missingNumber) {
    const hints = {
        en: [
            `The missing number is ${missingNumber % 2 === 0 ? 'even' : 'odd'}.`,
            `The missing number is ${missingNumber > 0 ? 'positive' : 'negative'}.`,
            `The sum of the digits of the missing number is ${missingNumber.toString().split('').reduce((a, b) => +a + +b, 0)}.`,
            `The missing number is ${missingNumber}. Try to find a pattern!`
        ],
        uk: [
            `–í—ñ–¥—Å—É—Ç–Ω—î —á–∏—Å–ª–æ ${missingNumber % 2 === 0 ? '–ø–∞—Ä–Ω–µ' : '–Ω–µ–ø–∞—Ä–Ω–µ'}.`,
            `–í—ñ–¥—Å—É—Ç–Ω—î —á–∏—Å–ª–æ ${missingNumber > 0 ? '–ø–æ–∑–∏—Ç–∏–≤–Ω–µ' : '–Ω–µ–≥–∞—Ç–∏–≤–Ω–µ'}.`,
            `–°—É–º–∞ —Ü–∏—Ñ—Ä –≤—ñ–¥—Å—É—Ç–Ω—å–æ–≥–æ —á–∏—Å–ª–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${missingNumber.toString().split('').reduce((a, b) => +a + +b, 0)}.`,
            `–í—ñ–¥—Å—É—Ç–Ω—î —á–∏—Å–ª–æ ${missingNumber}. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–∞–π—Ç–∏ –∑–∞–∫–æ–Ω–æ–º—ñ—Ä–Ω—ñ—Å—Ç—å!`
        ]
    };
    
    return hints[language]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
}
